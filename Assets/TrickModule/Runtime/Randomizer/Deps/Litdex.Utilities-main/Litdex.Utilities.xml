<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Litdex.Utilities</name>
    </assembly>
    <members>
        <member name="T:Litdex.Utilities.BinaryEncoding.Base16">
            <summary>
            	Encode and decode in base 16 (hexadecimal).
            </summary>
        </member>
        <member name="M:Litdex.Utilities.BinaryEncoding.Base16.Encode(System.Byte[],System.Boolean)">
            <summary>
            	Encode <paramref name="bytes"/> to hexadecimal <see cref="T:System.String"/>.
            </summary>
            <param name="bytes">
            	Array of <see cref="T:System.Byte"/>s to encode.
            </param>
            <param name="upperCase">
            	Hexadecimal output <see cref="T:System.String"/> letter case. Default is <see langword="true"/> to upper case.
            </param>
            <returns>
            	Hexadecimal <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="bytes"/> is null or empty.
            </exception>
        </member>
        <member name="M:Litdex.Utilities.BinaryEncoding.Base16.EncodeUpper(System.Byte[])">
            <summary>
            	Encode array of <see cref="T:System.Byte"/>s to hexadecimal <see cref="T:System.String"/> in upper case.
            </summary>
            <param name="bytes">
            	Array of <see cref="T:System.Byte"/>s to encode.
            </param>
            <returns>
            	Hexadecimal <see cref="T:System.String"/> in upper case.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.BinaryEncoding.Base16.EncodeLower(System.Byte[])">
            <summary>
            	Encode array of <see cref="T:System.Byte"/>s to hexadecimal string in lower case.
            </summary>
            <param name="bytes">
            	Array of <see cref="T:System.Byte"/>s to encode.
            </param>
            <returns>
            	Hexadecimal <see cref="T:System.String"/> in lower case.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.BinaryEncoding.Base16.Decode(System.String)">
            <summary>
            	Decode hexadecimal <see cref="T:System.String"/> to array of <see cref="T:System.Byte"/>s.
            </summary>
            <param name="hexString">
            	Hexadecimal <see cref="T:System.String"/> to decode.
            </param>
            <returns>
            	Array of <see cref="T:System.Byte"/>s from decoded <paramref name="hexString"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="hexString"/> is null, empty or only containing white spaces.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="hexString"/> length is odd.
            </exception>
        </member>
        <member name="M:Litdex.Utilities.BinaryEncoding.Base16.Decode(System.Char[])">
            <summary>
            	Decode hexadecimal <see cref="T:System.String"/> to array of <see cref="T:System.Byte"/>s.
            </summary>
            <param name="hexString">
            	Hexadecimal <see cref="T:System.String"/> to decode.
            </param>
            <returns>
            	Array of <see cref="T:System.Byte"/>s from decoded <paramref name="hexString"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="hexString"/> is null, empty or only containing white spaces.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="hexString"/> length is odd.
            </exception>
        </member>
        <member name="T:Litdex.Utilities.BinaryEncoding.Base64">
            <summary>
            	Encode and decode in base 64.
            </summary>
        </member>
        <member name="M:Litdex.Utilities.BinaryEncoding.Base64.Encode(System.Byte[])">
            <summary>
            	Converts an array of 8-bit unsigned integers to its 
            	equivalent string representation that is encoded with 
            	base-64 digits.
            </summary>
            <param name="data">
            	 An array of 8-bit unsigned integers.
            </param>
            <returns>
            	The string representation, in base 64, of the contents <paramref name="data"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is null or empty.
            </exception>
        </member>
        <member name="M:Litdex.Utilities.BinaryEncoding.Base64.Decode(System.String)">
            <summary>
            	Converts the specified string, 
            	which encodes binary data as base-64 digits, 
            	to an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="data">
            	The string to convert.
            </param>
            <returns>
            	An array of 8-bit unsigned integers that is equivalent to <paramref name="data"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.FormatException">
            </exception>
        </member>
        <member name="T:Litdex.Utilities.BinaryEncoding.Base85">
            <summary>
            	Converts between binary data and an Ascii85-encoded string.
            </summary>
            <remarks>See <a href="http://en.wikipedia.org/wiki/Ascii85">Ascii85 at Wikipedia</a>.</remarks>
        </member>
        <member name="M:Litdex.Utilities.BinaryEncoding.Base85.Encode(System.Byte[])">
            <summary>
            	Encodes the specified array of <see cref="T:System.Byte"/>s in Ascii85.
            </summary>
            <param name="bytes">
            	Array of <see cref="T:System.Byte"/>s to encode.
            </param>
            <returns>
            	An Ascii85-encoded <see cref="T:System.String"/> representing the input byte array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="bytes"/> is null or empty.
            </exception>
        </member>
        <member name="M:Litdex.Utilities.BinaryEncoding.Base85.Decode(System.String)">
            <summary>
            	Decodes the specified Ascii85 <see cref="T:System.String"/> into the corresponding array of <see cref="T:System.Byte"/>s.
            </summary>
            <param name="encoded">
            	The Ascii85 string.
            </param>
            <returns>
            	Array of <see cref="T:System.Byte"/>s from decoded <paramref name="encoded"/>.	
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	
            </exception>
        </member>
        <member name="T:Litdex.Utilities.BinaryEncoding.Base91">
            <summary>
            	Encode and decode in base91.
            </summary>
        </member>
        <member name="M:Litdex.Utilities.BinaryEncoding.Base91.Encode(System.Byte[])">
            <summary>
            	Convert array of <see cref="T:System.Byte"/>s to Base91 string.
            </summary>
            <param name="bytes">
            	Array of <see cref="T:System.Byte"/>s to encode.
            </param>
            <returns>
            	Base91 <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="bytes"/> can't null or empty.
            </exception>
        </member>
        <member name="M:Litdex.Utilities.BinaryEncoding.Base91.Decode(System.String)">
            <summary>
            	Convert Base91 <see cref="T:System.String"/> to array of <see cref="T:System.Byte"/>s.
            </summary>
            <param name="base91String">
            	Base91 <see cref="T:System.String"/> to decode.
            </param>
            <returns>
            	Array of <see cref="T:System.Byte"/>s from <paramref name="base91String"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="base91String"/> can't null or empty.
            </exception>
        </member>
        <member name="T:Litdex.Utilities.Extension.ArrayExtensions">
            <summary>
            	Array extensions.
            </summary>
        </member>
        <member name="M:Litdex.Utilities.Extension.ArrayExtensions.Clear(System.Array)">
            <summary>
            	Clear all element inside the array.
            </summary>
            <param name="arr">
            	<see cref="T:System.Array"/> to clear.
            </param>
        </member>
        <member name="M:Litdex.Utilities.Extension.ArrayExtensions.Slice``1(``0[],System.Int32)">
            <summary>
            	Slice the array to create a new copy of new array.
            </summary>
            <typeparam name="T">
            	The type of objects in array.
            </typeparam>
            <param name="array">
            	An array that want to slice.
            </param>
            <param name="start">
            	The start index to slice the array.
            </param>
            <returns>
            	A deep copy of elements from the specified start index until the last element from the array.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	- Start index can't be negative number and larger than arrray length.
            	- Requested length can't exceed from remaining length of array after the start index.
            </exception>
        </member>
        <member name="M:Litdex.Utilities.Extension.ArrayExtensions.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
            	Slice the array to create a new copy of new array.
            </summary>
            <typeparam name="T">
            	The type of objects in array.
            </typeparam>
            <param name="array">
            	An array that want to slice.
            </param>
            <param name="start">
            	The start index to slice the array.
            </param>
            <param name="length">
            	A requested length of how many element to slice from the start index.
            </param>
            <returns>
            	A deep copy of elements between the specified start index and requested length.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	- Start index can't be negative number and larger than arrray length.
            	- Requested length can't exceed from remaining length of array after the start index.
            </exception>
        </member>
        <member name="M:Litdex.Utilities.Extension.ArrayExtensions.Concat``1(``0[],``0[])">
            <summary>
            	Concat with another array to create a new array.
            </summary>
            <typeparam name="T">
            	The type of objects in array.
            </typeparam>
            <param name="currentArray">
            	
            </param>
            <param name="array">
            	Array to concat.
            </param>
            <returns>
            	Concation of 2 array.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	The two or one of the array is null.
            </exception>
        </member>
        <member name="T:Litdex.Utilities.Extension.BinaryEncodingExtensions">
            <summary>
            	Encoding and decoding binary dato to text and vice versa.
            </summary>
        </member>
        <member name="M:Litdex.Utilities.Extension.BinaryEncodingExtensions.ToBase16(System.Byte[],System.Boolean)">
            <summary>
            	Encode the array of <see cref="T:System.Byte"/>s to Base16 <see cref="T:System.String"/>.
            </summary>
            <param name="bytes">
            	Array of <see cref="T:System.Byte"/> to encode.
            </param>
            <param name="upperCase">
            	Base16 <see cref="T:System.String"/> letter case. Default is upper case.
            </param>
            <returns>
            	Base16 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.BinaryEncodingExtensions.ToBase64(System.Byte[])">
            <summary>
            	Encode the array of <see cref="T:System.Byte"/>s to Base64 <see cref="T:System.String"/>.
            </summary>
            <param name="bytes">
            	Array of <see cref="T:System.Byte"/> to encode.
            </param>
            <returns>
            	Base64 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.BinaryEncodingExtensions.ToBase85(System.Byte[])">
            <summary>
            	Encode the array of <see cref="T:System.Byte"/>s to Base85 <see cref="T:System.String"/>.
            </summary>
            <param name="bytes">
            	Array of <see cref="T:System.Byte"/> to encode.
            </param>
            <returns>
            	Base85 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.BinaryEncodingExtensions.ToBase91(System.Byte[])">
            <summary>
            	Encode the array of <see cref="T:System.Byte"/>s to Base91 <see cref="T:System.String"/>.
            </summary>
            <param name="bytes">
            	Array of <see cref="T:System.Byte"/> to encode.
            </param>
            <returns>
            	Base91 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.BinaryEncodingExtensions.ToBase16(System.String,System.Boolean)">
            <summary>
            	Encode the <see cref="T:System.String"/> to Base16 <see cref="T:System.String"/>.
            </summary>
            <param name="text">
            	<see cref="T:System.String"/> to encode.
            </param>
            <param name="upperCase">
            	Base16 <see cref="T:System.String"/> letter case. Default is upper case.
            </param>
            <returns>
            	Base16 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.BinaryEncodingExtensions.ToBase64(System.String)">
            <summary>
            	Encode the <see cref="T:System.String"/> to Base64 <see cref="T:System.String"/>.
            </summary>
            <param name="text">
            	<see cref="T:System.String"/> to encode.
            </param>
            <returns>
            	Base64 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.BinaryEncodingExtensions.ToBase85(System.String)">
            <summary>
            	Encode the <see cref="T:System.String"/> to Base85 <see cref="T:System.String"/>.
            </summary>
            <param name="text">
            	<see cref="T:System.String"/> to encode.
            </param>
            <returns>
            	Base85 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.BinaryEncodingExtensions.ToBase91(System.String)">
            <summary>
            	Encode the <see cref="T:System.String"/> to Base91 <see cref="T:System.String"/>.
            </summary>
            <param name="text">
            	<see cref="T:System.String"/> to encode.
            </param>
            <returns>
            	Base91 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.BinaryEncodingExtensions.DecodeBase16(System.Char[])">
            <summary>
            	Decode Base16 <see cref="T:System.String"/> to array of <see cref="T:System.Byte"/>s.
            </summary>
            <param name="str">
            	Base16 <see cref="T:System.String"/> to decode.
            </param>
            <returns>
            	Array of <see cref="T:System.Byte"/> that decoded from Base16 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.BinaryEncodingExtensions.DecodeBase16(System.String)">
            <summary>
            	Decode Base16 <see cref="T:System.String"/> to array of <see cref="T:System.Byte"/>s.
            </summary>
            <param name="str">
            	Base16 <see cref="T:System.String"/> to decode.
            </param>
            <returns>
            	Array of <see cref="T:System.Byte"/> that decoded from Base16 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.BinaryEncodingExtensions.DecodeBase64(System.String)">
            <summary>
            	Decode Base64 <see cref="T:System.String"/> to array of <see cref="T:System.Byte"/>s.
            </summary>
            <param name="str">
            	Base64 <see cref="T:System.String"/> to decode.
            </param>
            <returns>
            	Array of <see cref="T:System.Byte"/> that decoded from Base64 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.BinaryEncodingExtensions.DecodeBase85(System.String)">
            <summary>
            	Decode Base85 <see cref="T:System.String"/> to array of <see cref="T:System.Byte"/>s.
            </summary>
            <param name="str">
            	Base85 <see cref="T:System.String"/> to decode.
            </param>
            <returns>
            	Array of <see cref="T:System.Byte"/> that decoded from Base85 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.BinaryEncodingExtensions.DecodeBase91(System.String)">
            <summary>
            	Decode Base91 <see cref="T:System.String"/> to array of <see cref="T:System.Byte"/>s.
            </summary>
            <param name="str">
            	Base91 <see cref="T:System.String"/> to decode.
            </param>
            <returns>
            	Array of <see cref="T:System.Byte"/> that decoded from Base91 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:Litdex.Utilities.Extension.ByteArrayExtensions">
            <summary>
            	Byte[] Extension.
            </summary>
        </member>
        <member name="M:Litdex.Utilities.Extension.ByteArrayExtensions.GetString(System.Byte[])">
            <summary>
            	Convert array of <see cref="T:System.Byte"/>s to UTF-8 <see cref="T:System.String"/>.
            </summary>
            <param name="bytes">
            	Array of <see cref="T:System.Byte"/>s to convert.
            </param>
            <returns>
            	UTF-8 <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:Litdex.Utilities.Extension.GuidExtensions">
            <summary>
            	<see cref="T:System.Guid"/> extensions based on RFC 4122.
            </summary>
            <remarks>
            	https://github.com/LogosBible/Logos.Utility/blob/master/src/Logos.Utility/GuidUtility.cs
            </remarks>
        </member>
        <member name="M:Litdex.Utilities.Extension.GuidExtensions.CreateV5(System.Guid,System.String)">
            <summary>
            	Creates a name-based UUID version 5 using the algorithm from RFC 4122 §4.3.
            </summary>
            <param name="namespaceId">
            	The ID of the namespace.
            </param>
            <param name="name">
            	The name (within that namespace).
            </param>
            <returns>
            	A UUID derived from the namespace and name.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.GuidExtensions.CreateV3(System.Guid,System.String)">
            <summary>
            	Creates a name-based UUID version 3 using the algorithm from RFC 4122 §4.3.
            </summary>
            <param name="namespaceId">
            	The ID of the namespace.
            </param>
            <param name="name">
            	The name (within that namespace).
            </param>
            <returns>
            	A UUID derived from the namespace and name.
            </returns>
        </member>
        <member name="T:Litdex.Utilities.Extension.NumberExtensions">
            <summary>
            	Integer extensions.
            </summary>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.LeftRotate(System.Byte,System.Byte)">
            <summary>
            	Rotate the bits to the left. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Left rotate of the number.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.LeftRotate(System.Int16,System.Int16)">
            <summary>
            	Rotate the bits to the left. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Left rotate of the number.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.LeftRotate(System.UInt16,System.UInt16)">
            <summary>
            	Rotate the bits to the left. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Left rotate of the number.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.LeftRotate(System.Int32,System.Int32)">
            <summary>
            	Rotate the bits to the left. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Left rotate of the number.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.LeftRotate(System.UInt32,System.Int32)">
            <summary>
            	Rotate the bits to the left. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Left rotate of the number.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.LeftRotate(System.Int64,System.Int32)">
            <summary>
            	Rotate the bits to the left. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Left rotate of the number.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.LeftRotate(System.UInt64,System.Int32)">
            <summary>
            	Rotate the bits to the left. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Left rotate of the number.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.RightRotate(System.Byte,System.Byte)">
            <summary>
            	Rotate the bits to the right. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Right rotate of the number.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.RightRotate(System.Int16,System.Int16)">
            <summary>
            	Rotate the bits to the right. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Right rotate of the number.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.RightRotate(System.UInt16,System.UInt16)">
            <summary>
            	Rotate the bits to the right. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Right rotate of the number.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.RightRotate(System.Int32,System.Int32)">
            <summary>
            	Rotate the bits to the right. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Right rotate of the number.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.RightRotate(System.UInt32,System.Int32)">
            <summary>
            	Rotate the bits to the right. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Right rotate of the number.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.RightRotate(System.Int64,System.Int32)">
            <summary>
            	Rotate the bits to the right. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Right rotate of the number.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.NumberExtensions.RightRotate(System.UInt64,System.Int32)">
            <summary>
            	Rotate the bits to the right. 
            </summary>
            <param name="value">
            	The number to rotate.
            </param>
            <param name="shiftBit">
            	How many bit to shift.
            </param>
            <returns>
            	Right rotate of the number.
            </returns>
        </member>
        <member name="T:Litdex.Utilities.Extension.ObjectExtensions">
            <summary>
            	Object Extension.
            </summary>
        </member>
        <member name="M:Litdex.Utilities.Extension.ObjectExtensions.GetObjectAddress(System.Object)">
            <summary>
            	Get object address in RAM.
            </summary>
            <param name="obj">
            	
            </param>
            <returns>
            	64-bit signed integer RAM address.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.ObjectExtensions.Clone``1(``0)">
            <summary>
            	Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">
            	The type of object being copied.
            </typeparam>
            <param name="source">
            	The object instance to copy.
            </param>
            <returns>
            	The copied object.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.ObjectExtensions.IsSerializable(System.Object)">
            <summary>
            	Check is the object is serializable.
            </summary>
            <param name="obj">
            	Object to check.
            </param>
            <returns>
            	
            </returns>
        </member>
        <member name="T:Litdex.Utilities.Extension.StringExtension">
            <summary>
            	String Extension
            </summary>
        </member>
        <member name="M:Litdex.Utilities.Extension.StringExtension.GetBytes(System.String)">
            <summary>
            	Convert <see cref="T:System.String"/> to an array of <see cref="T:System.Byte"/>.
            </summary>
            <param name="str">
            	A <see cref="T:System.String"/> to convert.
            </param>
            <returns>
            	An array of <see cref="T:System.Byte"/>s from <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:Litdex.Utilities.Extension.StringExtension.GetBytes(System.Char[])">
            <summary>
            	Convert array of <see cref="T:System.Char"/> to an array of <see cref="T:System.Byte"/>.
            </summary>
            <param name="str">
            	A array of <see cref="T:System.Char"/> to convert.
            </param>
            <returns>
            	An array of <see cref="T:System.Byte"/>s from array of <see cref="T:System.Char"/>.
            </returns>
        </member>
        <member name="T:Litdex.Utilities.GuidUtility">
            <summary>
            	Helper methods for working with <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="F:Litdex.Utilities.GuidUtility.DnsNamespace">
            <summary>
            	The namespace for fully-qualified domain names (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="F:Litdex.Utilities.GuidUtility.UrlNamespace">
            <summary>
            	The namespace for URLs (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="F:Litdex.Utilities.GuidUtility.IsoOidNamespace">
            <summary>
            	The namespace for ISO OIDs (from RFC 4122, Appendix C).
            </summary>
        </member>
        <member name="M:Litdex.Utilities.GuidUtility.Create(System.Guid,System.String,System.Int32)">
            <summary>
            	Creates a name-based UUID using the algorithm from RFC 4122 §4.3.
            </summary>
            <param name="namespaceId">
            	The ID of the namespace.
            </param>
            <param name="name">
            	The name (within that namespace).
            </param>
            <param name="version">
            	The version number of the UUID to create; this value must be either
            	3 (for MD5 hashing) or 5 (for SHA-1 hashing).
            </param>
            <returns>
            	A UUID derived from the <paramref name="namespaceId"/> and <paramref name="name"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	Name can't null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	Version must be either 3 or 5.
            </exception>
        </member>
        <member name="M:Litdex.Utilities.GuidUtility.SwapByteOrder(System.Byte[])">
            <summary>
            	Converts a GUID (expressed as a byte array) to/from network order (MSB-first).
            </summary>
            <param name="guid">
            	
            </param>
        </member>
    </members>
</doc>
